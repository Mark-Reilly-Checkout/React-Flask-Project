{"ast":null,"code":"function e(e, t, n) {\n  return (t = function (e) {\n    var t = function (e, t) {\n      if (\"object\" != typeof e || null === e) return e;\n      var n = e[Symbol.toPrimitive];\n      if (void 0 !== n) {\n        var o = n.call(e, t || \"default\");\n        if (\"object\" != typeof o) return o;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n      }\n      return (\"string\" === t ? String : Number)(e);\n    }(e, \"string\");\n    return \"symbol\" == typeof t ? t : String(t);\n  }(t)) in e ? Object.defineProperty(e, t, {\n    value: n,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[t] = n, e;\n}\nlet t = function (e) {\n    return e.Production = \"production\", e.Sandbox = \"sandbox\", e;\n  }({}),\n  n = function (e) {\n    return e.Applepay = \"applepay\", e.Bancontact = \"bancontact\", e.Card = \"card\", e.Eps = \"eps\", e.Giropay = \"giropay\", e.Googlepay = \"googlepay\", e.Ideal = \"ideal\", e.Knet = \"knet\", e.Multibanco = \"multibanco\", e.P24 = \"p24\", e.Paypal = \"paypal\", e.Sofort = \"sofort\", e.Flow = \"flow\", e;\n  }({}),\n  o = function (e) {\n    return e.NotEnoughFunds = \"not_enough_funds\", e.InvalidPaymentSessionData = \"invalid_payment_session_data\", e.InvalidCustomerData = \"invalid_customer_data\", e.MerchantMisconfiguration = \"merchant_misconfiguration\", e.TryAgain = \"try_again\", e;\n  }({}),\n  i = function (e) {\n    return e.Integration = \"Integration\", e.Request = \"Request\", e.PaymentMethod = \"PaymentMethod\", e.Submit = \"Submit\", e;\n  }({}),\n  r = function (e) {\n    return e.PaymentMethodAttemptFailed = \"payment_method_attempt_failed\", e;\n  }({}),\n  a = function (e) {\n    return e.BrowserEnvironmentRequired = \"browser_environment_required\", e.CallbackResultInvalid = \"callback_result_invalid\", e.ComponentAlreadyMounted = \"component_already_mounted\", e.ComponentIsAvailableNotChecked = \"component_is_available_not_checked\", e.ComponentNotSupported = \"component_not_supported\", e.ElementNotFound = \"element_not_found\", e.PaymentSessionInvalid = \"payment_session_invalid\", e;\n  }({}),\n  u = function (e) {\n    return e.PaymentRequestDeclined = \"payment_request_declined\", e.PaymentRequestFailed = \"payment_request_failed\", e;\n  }({}),\n  c = function (e) {\n    return e.ComponentInvalid = \"component_invalid\", e;\n  }({}),\n  d = function (e) {\n    return e.Subheading = \"subheading\", e.Footnote = \"footnote\", e.Button = \"button\", e.Input = \"input\", e.Label = \"label\", e;\n  }({});\nconst s = \"https://checkout-web-components.checkout.com/index.js\";\nlet p = function (e) {\n    return e.Integration = \"Integration\", e;\n  }({}),\n  m = function (e) {\n    return e.BrowserEnvironmentRequired = \"browser_environment_required\", e.CheckoutWebComponentInstanceNotOnWindow = \"checkout_web_component_instance_not_on_window\", e.ScriptFailed = \"script_failed\", e.ScriptTimedOut = \"script_timed_out\", e;\n  }({});\nclass l extends Error {\n  constructor({\n    type: t,\n    message: n,\n    code: o\n  }) {\n    super(`[${t}]: ${n} [${o}]`), e(this, \"type\", void 0), e(this, \"code\", void 0), Object.setPrototypeOf(this, l.prototype), this.type = t, this.code = o, this.name = \"CheckoutLoaderError\";\n  }\n}\nconst y = async e => {\n  if (\"undefined\" == typeof window || \"undefined\" == typeof document) throw new l({\n    type: p.Integration,\n    message: \"CheckoutWebComponents can only run in a browser environment\",\n    code: m.BrowserEnvironmentRequired\n  });\n  if (window.CheckoutWebComponents) return window.CheckoutWebComponents(e);\n  const t = (e => {\n      const t = document.querySelectorAll(`script[src^=\"${s}\"]`);\n      if (t.length > 0) for (let e = 0; e < t.length; e++) t[e].remove();\n      const n = document.createElement(\"script\");\n      return n.src = e, n.async = !0, document.head.appendChild(n), n;\n    })(s),\n    n = await (async e => new Promise((t, n) => {\n      e.addEventListener(\"load\", () => {\n        window.CheckoutWebComponents ? t(window.CheckoutWebComponents) : n(new l({\n          type: p.Integration,\n          message: \"CheckoutWebComponents loaded but window.CheckoutWebComponents isn't present\",\n          code: m.CheckoutWebComponentInstanceNotOnWindow\n        }));\n      }), e.addEventListener(\"error\", () => {\n        n(new l({\n          type: p.Integration,\n          message: \"CheckoutWebComponents did not load due to script failing\",\n          code: m.ScriptFailed\n        }));\n      }), setTimeout(() => {\n        n(new l({\n          type: p.Integration,\n          message: \"CheckoutWebComponents did not load due to script timing out\",\n          code: m.ScriptTimedOut\n        }));\n      }, 3e4);\n    }))(t);\n  return n(e);\n};\nexport { s as CDN_URL, i as CheckoutErrorType, a as CheckoutIntegrationErrorCode, l as CheckoutLoaderError, p as CheckoutLoaderErrorType, m as CheckoutLoaderIntegrationErrorCode, r as CheckoutPaymentMethodErrorCode, u as CheckoutRequestErrorCode, c as CheckoutSubmitErrorCode, n as ComponentName, t as Environment, d as FontName, o as PaymentDeclineReason, y as loadCheckoutWebComponents };","map":{"version":3,"names":["t","e","Production","Sandbox","n","Applepay","Bancontact","Card","Eps","Giropay","Googlepay","Ideal","Knet","Multibanco","P24","Paypal","Sofort","Flow","o","NotEnoughFunds","InvalidPaymentSessionData","InvalidCustomerData","MerchantMisconfiguration","TryAgain","i","Integration","Request","PaymentMethod","Submit","r","PaymentMethodAttemptFailed","a","BrowserEnvironmentRequired","CallbackResultInvalid","ComponentAlreadyMounted","ComponentIsAvailableNotChecked","ComponentNotSupported","ElementNotFound","PaymentSessionInvalid","u","PaymentRequestDeclined","PaymentRequestFailed","c","ComponentInvalid","d","Subheading","Footnote","Button","Input","Label","s","p","m","CheckoutWebComponentInstanceNotOnWindow","ScriptFailed","ScriptTimedOut","l","Error","constructor","type","message","code","Object","setPrototypeOf","prototype","name","y","window","document","CheckoutWebComponents","querySelectorAll","length","remove","createElement","src","async","head","appendChild","Promise","addEventListener","setTimeout","CDN_URL","CheckoutErrorType","CheckoutIntegrationErrorCode","CheckoutLoaderError","CheckoutLoaderErrorType","CheckoutLoaderIntegrationErrorCode","CheckoutPaymentMethodErrorCode","CheckoutRequestErrorCode","CheckoutSubmitErrorCode","ComponentName","Environment","FontName","PaymentDeclineReason","loadCheckoutWebComponents"],"sources":["/Users/mark.reilly/Documents/react-flask-project/frontend/node_modules/@checkout.com/checkout-web-components/src/types.ts","/Users/mark.reilly/Documents/react-flask-project/frontend/node_modules/@checkout.com/checkout-web-components/src/index.ts"],"sourcesContent":["type Prettify<T> = {\n  [K in keyof T]: T[K];\n  // eslint-disable-next-line @typescript-eslint/ban-types\n} & {};\n\n/**\n * Enumeration of the possible environments.\n * @enum {string}\n */\nexport enum Environment {\n  Production = 'production',\n  Sandbox = 'sandbox',\n}\n\n/**\n * Union type representing the environment values as strings.\n */\nexport type EnvironmentUnion = `${Environment}`;\n\n/**\n * Translation keys for various messages used in the application.\n * @interface {Object} Translations\n */\nexport type Translations = {\n  /**\n   * The call to action message to capture the customer's full name.\n   */\n  'bancontact.holder_name': string;\n\n  /**\n   * The label for the card option.\n   */\n  card: string;\n\n  /**\n   * Label for cardholder name input.\n   */\n  'card.card_holder_name': string;\n\n  /**\n   * Label for the card number input.\n   */\n  'card.card_number': string;\n\n  /**\n   * Error message displayed when the card number is incomplete.\n   */\n  'card.card_number.invalid': string;\n\n  /**\n   * Error message displayed when the card number comes from an unsupported card scheme.\n   */\n  'card.card_number.not_supported': string;\n\n  /**\n   * Label for card expiry date input.\n   */\n  'card.expiry_date': string;\n\n  /**\n   * Error message displayed when the card expiry date is invalid.\n   */\n  'card.expiry_date.invalid': string;\n\n  /**\n   * Message describing the format for card expiry month input.\n   */\n  'card.expiry_date.placeholder.month': string;\n\n  /**\n   * Message describing the format for card expiry year input.\n   */\n  'card.expiry_date.placeholder.year': string;\n\n  /**\n   * Label for preferred scheme selection.\n   */\n  'card.preferred_scheme.cta': string;\n\n  /**\n   * Message prompting the customer to select their preferred scheme.\n   */\n  'card.preferred_scheme.description': string;\n\n  /**\n   * Label for card security code (CVV) input.\n   */\n  'card.security_code': string;\n\n  /**\n   * Error message displayed when the security code (CVV) is incomplete.\n   */\n  'card.security_code.invalid': string;\n\n  /**\n   * Message describing the format for card security code input.\n   */\n  'card.security_code.placeholder': string;\n\n  /**\n   * Validation message displayed when the customer provides an invalid email.\n   */\n  'form.email.invalid': string;\n\n  /**\n   * Placeholder message displayed in the empty email input field.\n   */\n  'form.email.placeholder': string;\n\n  /**\n   * Placeholder message displayed in the empty full name input field.\n   */\n  'form.full_name.placeholder': string;\n\n  /**\n   * Validation message displayed when the customer inputs a value shorter than the required length.\n   */\n  'form.greater_than': string;\n\n  /**\n   * Validation message displayed when the customer inputs a value longer than the required length.\n   */\n  'form.less_than': string;\n\n  /**\n   * Validation message displayed when the customer leaves a required field blank.\n   */\n  'form.required': string;\n\n  /**\n   * Label for bank selection.\n   */\n  'ideal.bank': string;\n\n  /**\n   * Label for full name input.\n   */\n  'multibanco.holder_name': string;\n\n  /**\n   * Label for email input.\n   */\n  'p24.holder_email': string;\n\n  /**\n   * Label for full name input.\n   */\n  'p24.holder_name': string;\n\n  /**\n   * The call to action displayed on the pay button.\n   */\n  'pay_button.pay': string;\n\n  /**\n   * The payment method-specific call to action displayed on the pay button.\n   */\n  'pay_button.pay_with': string;\n\n  /**\n   * Message displayed when the payment is completed.\n   */\n  'pay_button.payment_complete': string;\n\n  /**\n   * Error message displayed if the payment attempt fails.\n   */\n  'pay_button.payment_failed': string;\n\n  /**\n   * Message displayed while the payment is processing.\n   */\n  'pay_button.payment_processing': string;\n\n  /**\n   * Message displayed when the customer is about to be redirected to complete their payment.\n   */\n  'pay_button.redirect_cta': string;\n\n  /**\n   * Error message displayed when the customer has provided invalid payment details.\n   */\n  'payment.declined.invalid_customer_data': string;\n\n  /**\n   * Error message displayed when the PaymentSession data provided is invalid for the chosen payment method – this exists to cover edge-cases and should not occur.\n   */\n  'payment.declined.invalid_payment_session_data': string;\n\n  /**\n   * Error message displayed when the merchant is misconfigured for the chosen payment method.\n   */\n  'payment.declined.merchant_misconfiguration': string;\n\n  /**\n   * Error message displayed when the customer does not hold sufficient funds to complete the transaction with their chosen payment method.\n   */\n  'payment.declined.not_enough_funds': string;\n\n  /**\n   * Fallback message displayed when the chosen payment method declines the transaction.\n   */\n  'payment.declined.try_again': string;\n};\n\n/**\n * Type representing custom translations for different locales.\n * @interface CustomTranslations\n * @property {Partial<Translations>} [locale] - Custom translations for a specific locale (examples `en` or `en-GB`).\n */\nexport type CustomTranslations = {\n  /**\n   * Custom translations for a specific locale (examples `en` or `en-GB`).\n   */\n\n  [locale: string]: Partial<Translations>;\n};\n\n/**\n * Enumeration of the supported component names.\n * @enum {string}\n */\nexport enum ComponentName {\n  Applepay = 'applepay',\n  Bancontact = 'bancontact',\n  Card = 'card',\n  Eps = 'eps',\n  Giropay = 'giropay',\n  Googlepay = 'googlepay',\n  Ideal = 'ideal',\n  Knet = 'knet',\n  Multibanco = 'multibanco',\n  P24 = 'p24',\n  Paypal = 'paypal',\n  Sofort = 'sofort',\n  Flow = 'flow',\n}\n\n/**\n * Union type representing the component name values as strings.\n */\nexport type ComponentNameUnion = `${ComponentName}`;\n\n/**\n * Interface representing a component in the checkout flow.\n * @interface Component\n */\nexport interface Component {\n  /** The type of the component. */\n  type: ComponentNameUnion;\n  /**\n   * Submits a Component, if you require your own pay button.\n   * Not available for digital wallets, including Apple Pay and Google Pay.\n   *\n   * @return {Component} The Component instance.\n   */\n\n  submit(): void;\n  /**\n   * Checks if the Component has captured all details from the\n   * customer and can be submitted.\n   *\n   * @return {boolean} Validity of the Component for submission.\n   */\n\n  isValid(): boolean;\n  /**\n   * Checks if the Component can be rendered.\n   * Call this before mounting the Component.\n   *\n   * @return {Promise<boolean>}\n   */\n\n  isAvailable(): Promise<boolean>;\n  /**\n   * Mounts a Component to a page.\n   * You can provide either:\n   * - an Element Selector\n   *   (https://developer.mozilla.org/en-US/docs/Web/API/Element)\n   * - a DOM Element Object\n   *   (https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors)\n   *\n   * @param {string} element - the Element Selector or DOM Element object to mount to\n   * @return {Component}\n   */\n\n  mount(element: string | Element): Component;\n  /**\n   * Unmounts a Component from the page.\n   * This stops the component rendering, and removes all life-cycles\n   * from the browser.\n   *\n   * @return {Component}\n   */\n\n  unmount(): Component;\n\n  /** The display name of the component. */\n  name: string;\n}\n\n/**\n * Enumeration of possible reasons for payment decline.\n * @enum {string}\n */\nexport enum PaymentDeclineReason {\n  NotEnoughFunds = 'not_enough_funds',\n  InvalidPaymentSessionData = 'invalid_payment_session_data',\n  InvalidCustomerData = 'invalid_customer_data',\n  MerchantMisconfiguration = 'merchant_misconfiguration',\n  TryAgain = 'try_again',\n}\n\n/**\n * Response type for a successful payment session.\n * @interface PayPaymentSessionSuccessfulResponse\n */\nexport type PayPaymentSessionSuccessfulResponse = {\n  /**\n   * The ID of the payment session.\n   */\n\n  id: string;\n  /**\n   * The status of the payment session, always 'Approved'.\n   */\n\n  status: 'Approved';\n  /**\n   * The component type associated with the payment session.\n   */\n\n  type: ComponentNameUnion;\n};\n\n/**\n * Enumeration of possible types of checkout errors.\n * @enum {string}\n */\nexport enum CheckoutErrorType {\n  Integration = 'Integration',\n  Request = 'Request',\n  PaymentMethod = 'PaymentMethod',\n  Submit = 'Submit',\n}\n\n/**\n * Enumeration of error codes for payment method errors.\n * @enum {string}\n */\nexport enum CheckoutPaymentMethodErrorCode {\n  PaymentMethodAttemptFailed = 'payment_method_attempt_failed',\n}\n\n/**\n * Enumeration of error codes for integration errors.\n * @enum {string}\n */\nexport enum CheckoutIntegrationErrorCode {\n  BrowserEnvironmentRequired = 'browser_environment_required',\n  CallbackResultInvalid = 'callback_result_invalid',\n  ComponentAlreadyMounted = 'component_already_mounted',\n  ComponentIsAvailableNotChecked = 'component_is_available_not_checked',\n  ComponentNotSupported = 'component_not_supported',\n  ElementNotFound = 'element_not_found',\n  PaymentSessionInvalid = 'payment_session_invalid',\n}\n\n/**\n * Enumeration of error codes for request errors.\n * @enum {string}\n */\nexport enum CheckoutRequestErrorCode {\n  PaymentRequestDeclined = 'payment_request_declined',\n  PaymentRequestFailed = 'payment_request_failed',\n}\n\n/**\n * Enumeration of error codes for submit errors.\n * @enum {string}\n */\nexport enum CheckoutSubmitErrorCode {\n  ComponentInvalid = 'component_invalid',\n}\n\n/**\n * Base type for checkout errors.\n * @interface CheckoutErrorBase\n */\ntype CheckoutErrorBase = {\n  /**\n   * The name of the error.\n   */\n\n  name: 'CheckoutError';\n  /**\n   * The error message. This is a human readable error message and can change, thus avoid relying on it.\n   */\n\n  message: string;\n};\n\n/**\n * Type for integration errors.\n * @interface CheckoutIntegrationError\n */\nexport type CheckoutIntegrationError = Prettify<\n  CheckoutErrorBase & {\n    /**\n     * The type of the error.\n     */\n    type: `${CheckoutErrorType.Integration}`;\n    /**\n     * The specific integration error code.\n     */\n\n    code: CheckoutIntegrationErrorCode;\n    /**\n     * Additional details about the error.\n     */\n\n    details: {\n      /**\n       * The unique identifier of the browser session that created the Component.\n       */\n\n      browserSessionId: string;\n      /**\n       * The Element selector or DOM object that caused the mounting error.\n       *\n       * This property is only returned for errors with an `element_not_found` error code.\n       */\n\n      element?: string | Element;\n      /**\n       * The unique identifier of the provided payment session response.\n       */\n\n      paymentSessionId?: string;\n      /**\n       * The name of the payment method used for the payment.\n       */\n      type?: ComponentNameUnion;\n    };\n  }\n>;\n\n/**\n * Type for request errors.\n * @interface CheckoutRequestError\n */\nexport type CheckoutRequestError = Prettify<\n  CheckoutErrorBase & {\n    /**\n     * The type of the error.\n     */\n\n    type: `${CheckoutErrorType.Request}`;\n    /**\n     * The specific request error code.\n     */\n\n    code: CheckoutRequestErrorCode | CheckoutPaymentMethodErrorCode;\n    /**\n     * Additional details about the error.\n     */\n\n    details: {\n      /**\n       * The unique identifier of the browser session that created the Component.\n       */\n\n      browserSessionId: string;\n      /**\n       * The payment ID.\n       */\n\n      paymentId?: string;\n      /**\n       * The unique identifier of the provided payment session response.\n       */\n\n      paymentSessionId: string;\n\n      /**\n       * Additional error codes returned from the network request.\n       */\n\n      requestErrorCodes?: (PaymentDeclineReason | string)[];\n\n      /**\n       * The unique identifier for the network request.\n       */\n\n      requestId?: string;\n      /**\n       * The [HTTP response status code](https://www.checkout.com/docs/developer-resources/codes/api-response-codes#HTTP_status_codes) for the network request.\n       */\n\n      status?: number;\n      /**\n       * The name of the payment method used for the payment.\n       */\n\n      type?: ComponentNameUnion;\n    };\n  }\n>;\n\n/**\n * Type for payment method errors.\n * @interface CheckoutPaymentMethodError\n */\nexport type CheckoutPaymentMethodError = Prettify<\n  CheckoutErrorBase & {\n    /**\n     * The type of the error.\n     */\n\n    type: `${CheckoutErrorType.PaymentMethod}`;\n    /**\n     * The specific payment method error code.\n     */\n\n    code: CheckoutPaymentMethodErrorCode;\n    /**\n     * Additional details about the error.\n     */\n\n    details: {\n      /**\n       * The unique identifier of the browser session that created the Component.\n       */\n\n      browserSessionId: string;\n      /**\n       * The unique identifier of the provided payment session response.\n       */\n\n      paymentSessionId: string;\n      /**\n       * The name of the payment method used for the payment.\n       */\n\n      type: ComponentNameUnion;\n    };\n  }\n>;\n\n/**\n * Type for submit errors.\n * @interface CheckoutSubmitError\n */\nexport type CheckoutSubmitError = Prettify<\n  CheckoutErrorBase & {\n    /**\n     * The type of the error.\n     */\n\n    type: `${CheckoutErrorType.Submit}`;\n\n    /**\n     * The specific payment method error code.\n     */\n\n    code: CheckoutSubmitErrorCode | CheckoutPaymentMethodErrorCode;\n    /**\n     * The specific submit error code.\n     */\n\n    details: {\n      /**\n       * The unique identifier of the browser session that created the Component.\n       */\n\n      browserSessionId: string;\n      /**\n       * The unique identifier of the provided payment session response.\n       */\n\n      paymentSessionId: string;\n      /**\n       * The name of the payment method used for the payment.\n       */\n\n      type: ComponentNameUnion;\n    };\n  }\n>;\n\n/**\n * Union type representing any checkout error.\n * @typedef {CheckoutIntegrationError | CheckoutRequestError | CheckoutPaymentMethodError | CheckoutSubmitError} CheckoutError\n */\nexport type CheckoutError =\n  | CheckoutIntegrationError\n  | CheckoutRequestError\n  | CheckoutPaymentMethodError\n  | CheckoutSubmitError;\n\nexport type HandleClickResult = {\n  continue: boolean;\n};\n\n/**\n * Type representing supported dimensions which can be a string or number.\n */\nexport type SupportedDimensions = string | number;\n\n/**\n * Interface representing font properties.\n * @interface Font\n */\nexport interface Font {\n  /** The font family name. */\n  fontFamily: string;\n  /** The font size. */\n  fontSize: SupportedDimensions;\n  /** The line height. */\n  lineHeight: SupportedDimensions;\n  /** The font weight. */\n  fontWeight: number;\n  /** The letter spacing. */\n  letterSpacing: SupportedDimensions;\n}\n\n/**\n * Type representing color tokens.\n * @interface ColorTokens\n */\nexport type ColorTokens = {\n  /** Primary color. */\n  colorPrimary: string;\n  /** Secondary color. */\n  colorSecondary: string;\n  /** Disabled state color. */\n  colorDisabled: string;\n  /** Error state color. */\n  colorError: string;\n  /** Inverse color. */\n  colorInverse: string;\n  /** Action color. */\n  colorAction: string;\n  /** Success state color. */\n  colorSuccess: string;\n  /** Background color. */\n  colorBackground: string;\n  /** Form background color. */\n  colorFormBackground: string;\n  /** Border color. */\n  colorBorder: string;\n  /** Form border color. */\n  colorFormBorder: string;\n  /** Outline color. */\n  colorOutline: string;\n};\n\n/**\n * Type representing border radius which is a tuple of supported dimensions.\n */\nexport type BorderRadius = [SupportedDimensions, SupportedDimensions];\n\n/**\n * Enumeration of font names.\n * @enum {string}\n */\nexport enum FontName {\n  Subheading = 'subheading',\n  Footnote = 'footnote',\n  Button = 'button',\n  Input = 'input',\n  Label = 'label',\n}\n\n/**\n * Type representing design tokens.\n * @interface DesignTokens\n */\nexport type DesignTokens = Prettify<\n  {\n    /**\n     * Subheading font properties.\n     */\n\n    subheading: Partial<Font>;\n    /**\n     * Footnote font properties.\n     */\n\n    footnote: Partial<Font>;\n    /**\n     * Button font properties.\n     */\n\n    button: Partial<Font>;\n    /**\n     * Input font properties.\n     */\n\n    input: Partial<Font>;\n    /**\n     * Label font properties.\n     */\n\n    label: Partial<Font>;\n\n    /**\n     * Border radius properties.\n     */\n\n    borderRadius: BorderRadius;\n\n    /**\n     * Border width.\n     */\n\n    borderWidth: string;\n\n    /**\n     * Focus outline width.\n     */\n\n    focusOutlineWidth: string;\n  } & ColorTokens\n>;\n\n/**\n * Type representing partial design tokens.\n */\nexport type PartialDesignTokens = Partial<DesignTokens>;\n\ntype SharedComponentOptions = {\n  /**\n   * Fired when a Component is initialized and ready\n   * for the customer to interact.\n   *\n   * Component is the instance that fired the event.\n   */\n\n  onReady?: (component: Component) => void;\n\n  /**\n   * Fired when a Component changes after a\n   * customer interaction.\n   *\n   * Component is the instance that fired the event.\n   */\n\n  onChange?: (component: Component) => void;\n\n  /**\n   * Fired when a Component changes after a\n   * customer interaction.\n   *\n   * Component is the instance that fired the event.\n   */\n\n  onSubmit?: (component: Component) => void;\n\n  /**\n   * Fired when the payment has been completed synchronously.\n   * This event will not be fired if the payment requires\n   * asynchronous action. For example, 3DS authentication.\n   *\n   * Component is the instance that fired the event.\n   *\n   * PaymentResponse contains information on the successful payment:\n   *   - {string} id - a unique identifier for the payment\n   *   - {string} status - the payment status – will always be 'Approved'\n   *   - {string} type - the name of the payment method that was used for the payment\n   */\n\n  onPaymentCompleted?: (component: Component, payment: PayPaymentSessionSuccessfulResponse) => void;\n\n  /**\n   * Fired when an error occurs.\n   *\n   * Component is the instance that fired the event.\n   *\n   * See the CheckoutError reference for more information.\n   */\n\n  onError?: (component: Component, error: CheckoutError) => void;\n};\n\n/**\n * Options for configuring a payment component.\n * @interface ComponentOptions\n */\nexport type ComponentOptions = Prettify<\n  SharedComponentOptions & {\n    /**\n     * Flag to show or hide the pay button.\n     */\n\n    showPayButton?: boolean;\n  }\n>;\n\n/**\n * Options for configuring the card component.\n * @interface CardComponentOptions\n */\nexport type CardComponentOptions = Prettify<\n  ComponentOptions & {\n    /**\n     * Object that can be used to provide data for fields.\n     */\n\n    data?: {\n      /**\n       * provide the card holder name.\n       */\n\n      cardholderName?: string;\n    };\n\n    /**\n     * The display state for the card holder name. If `top` or `bottom` the field is required, `hidden` will remove the field.\n     */\n\n    displayCardholderName?: 'top' | 'bottom' | 'hidden';\n  }\n>;\n\n/**\n * Options for configuring a wallet payment component.\n * @interface WalletComponentOptions\n */\nexport type WalletComponentOptions = Prettify<\n  SharedComponentOptions & {\n    /**\n     * Triggered when a wallet payment button is clicked.\n     * For example, Apple Pay, Google Pay, or PayPal.\n     *\n     * You can use this to perform checks before\n     * beginning the payment process.\n     *\n     * Component is the instance that triggered the callback.\n     */\n\n    handleClick?: (component: Component) => Promise<HandleClickResult> | HandleClickResult;\n  }\n>;\n\n/**\n * Options for configuring a flow payment component.\n * @interface FlowComponentOptions\n */\nexport type FlowComponentOptions = Prettify<ComponentOptions & WalletComponentOptions>;\n\n/**\n * Options for configuring any type of payment component.\n * @interface AllComponentOptions\n */\nexport type AllComponentOptions = Prettify<ComponentOptions & WalletComponentOptions>;\n\n/**\n * Response type for a payment session.\n * @interface PaymentSessionResponse\n */\n\nexport type PaymentSessionResponse = Record<string, unknown>;\n\n/**\n * Options map for different component names.\n * @interface OptionsMap\n */\ntype ComponentOptionsByComponentName = {\n  /**\n   * Options for ApplePay.\n   */\n\n  applepay: WalletComponentOptions;\n  /**\n   * Options for Bancontact.\n   */\n\n  bancontact: ComponentOptions;\n  /**\n   * Options for Bancontact.\n   */\n\n  card: CardComponentOptions;\n  /**\n   * Options for EPS.\n   */\n\n  eps: ComponentOptions;\n\n  /**\n   * Options for Giropay.\n   */\n  giropay: ComponentOptions;\n\n  /**\n   * Options for GooglePay.\n   */\n  googlepay: WalletComponentOptions;\n\n  /**\n   * Options for iDEAL.\n   */\n  ideal: ComponentOptions;\n\n  /**\n   * Options for KNET.\n   */\n  knet: ComponentOptions;\n\n  /**\n   * Options for Multibanco.\n   */\n  multibanco: ComponentOptions;\n\n  /**\n   * Options for Przelewy24.\n   */\n  p24: ComponentOptions;\n\n  /**\n   * Options for PayPal.\n   */\n  paypal: WalletComponentOptions;\n\n  /**\n   * Options for Sofort.\n   */\n  sofort: WalletComponentOptions;\n\n  /**\n   * Options for Flow.\n   */\n  flow: FlowComponentOptions;\n};\n\n/**\n * Configuration options for the checkout components.\n * @interface Options\n */\nexport type Options = Prettify<\n  {\n    /**\n     * The public API key.\n     */\n\n    publicKey: string;\n    /**\n     * The public API key.\n     */\n\n    paymentSession: PaymentSessionResponse;\n    /**\n     * The payment session response.\n     */\n\n    locale?: string;\n    /**\n     * The locale to be used.\n     */\n\n    environment?: EnvironmentUnion;\n    /**\n     * The public API key.\n     */\n\n    appearance?: PartialDesignTokens;\n    /**\n     * The custom translations.\n     */\n\n    translations?: CustomTranslations;\n    /**\n     * The component-specific options.\n     */\n\n    componentOptions?: ComponentOptionsByComponentName;\n  } & AllComponentOptions\n>;\n\n/**\n * Interface for creating checkout web components.\n * @interface CheckoutWebComponents\n */\nexport interface CheckoutWebComponents {\n  /**\n   * Creates a new component.\n   * @param {ComponentNameUnion} name - The name of the component.\n   * @param {ComponentOptions[T]} [options] - The options for the component.\n   * @returns {Component} The created component.\n   */\n  create<T extends ComponentNameUnion>(\n    /**\n     * The name of the component.\n     */\n\n    name: T,\n    /**\n     * The options for the component.\n     */\n\n    options?: ComponentOptionsByComponentName[T]\n  ): Component;\n}\n\n/**\n * Interface for initializing CheckoutWebComponents.\n * @interface WindowCheckoutWebComponents\n */\nexport interface WindowCheckoutWebComponents {\n  /**\n   * Initializes the CheckoutWebComponents.\n   * @param {Options} [options] - The options for the components.\n   * @returns {CheckoutWebComponents} The initialized CheckoutWebComponents.\n   */\n  (options?: Options): CheckoutWebComponents;\n}\n\n/**\n * Loads the checkout web components.\n * @param {Options} options - The options for loading the components.\n * @returns {Promise<CheckoutWebComponents>} A promise that resolves to the loaded checkout web components.\n */\nexport type LoadCheckoutWebComponents = (options: Options) => Promise<CheckoutWebComponents>;\n","import { LoadCheckoutWebComponents, WindowCheckoutWebComponents } from './types';\n\nexport * from './types';\nexport const CDN_URL = 'https://checkout-web-components.checkout.com/index.js';\n\nconst THIRTY_SECONDS = 30_000;\n\nexport enum CheckoutLoaderErrorType {\n  Integration = 'Integration',\n}\n\nexport enum CheckoutLoaderIntegrationErrorCode {\n  BrowserEnvironmentRequired = 'browser_environment_required',\n  CheckoutWebComponentInstanceNotOnWindow = 'checkout_web_component_instance_not_on_window',\n  ScriptFailed = 'script_failed',\n  ScriptTimedOut = 'script_timed_out',\n}\n\ntype CheckoutLoaderErrorOptions = {\n  type: CheckoutLoaderErrorType;\n  code: CheckoutLoaderIntegrationErrorCode;\n  message: string;\n};\n\nexport class CheckoutLoaderError extends Error {\n  public type: CheckoutLoaderErrorType;\n  public code: CheckoutLoaderIntegrationErrorCode;\n\n  constructor({ type, message, code }: CheckoutLoaderErrorOptions) {\n    super(`[${type}]: ${message} [${code}]`);\n\n    Object.setPrototypeOf(this, CheckoutLoaderError.prototype);\n\n    this.type = type;\n    this.code = code;\n    this.name = 'CheckoutLoaderError';\n  }\n}\n\n// Create a script tag with the CDN URL and inject it into the head of the document.\nconst createScript = (url: string) => {\n  const existingScripts = document.querySelectorAll<HTMLScriptElement>(`script[src^=\"${CDN_URL}\"]`);\n\n  if (existingScripts.length > 0) {\n    // if the scripts already exist, remove them and create a new one.\n    for (let i = 0; i < existingScripts.length; i++) {\n      const script = existingScripts[i];\n\n      script.remove();\n    }\n  }\n\n  const script = document.createElement('script');\n  script.src = url;\n  script.async = true;\n\n  document.head.appendChild(script);\n\n  return script;\n};\n\nconst waitForScriptLoad = async (script: HTMLScriptElement) => {\n  return new Promise<WindowCheckoutWebComponents>((resolve, reject) => {\n    script.addEventListener('load', () => {\n      if (window.CheckoutWebComponents) {\n        resolve(window.CheckoutWebComponents);\n      } else {\n        reject(\n          new CheckoutLoaderError({\n            type: CheckoutLoaderErrorType.Integration,\n            message: \"CheckoutWebComponents loaded but window.CheckoutWebComponents isn't present\",\n            code: CheckoutLoaderIntegrationErrorCode.CheckoutWebComponentInstanceNotOnWindow,\n          })\n        );\n      }\n    });\n\n    script.addEventListener('error', () => {\n      reject(\n        new CheckoutLoaderError({\n          type: CheckoutLoaderErrorType.Integration,\n          message: 'CheckoutWebComponents did not load due to script failing',\n          code: CheckoutLoaderIntegrationErrorCode.ScriptFailed,\n        })\n      );\n    });\n\n    setTimeout(() => {\n      reject(\n        new CheckoutLoaderError({\n          type: CheckoutLoaderErrorType.Integration,\n          message: 'CheckoutWebComponents did not load due to script timing out',\n          code: CheckoutLoaderIntegrationErrorCode.ScriptTimedOut,\n        })\n      );\n    }, THIRTY_SECONDS);\n  });\n};\n\n/**\n * Loads the checkout web components.\n * @throws {CheckoutLoaderError}\n */\nexport const loadCheckoutWebComponents: LoadCheckoutWebComponents = async (options) => {\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    throw new CheckoutLoaderError({\n      type: CheckoutLoaderErrorType.Integration,\n      message: 'CheckoutWebComponents can only run in a browser environment',\n      code: CheckoutLoaderIntegrationErrorCode.BrowserEnvironmentRequired,\n    });\n  }\n\n  // if the script is already loaded, return the CheckoutWebComponents from the window object.\n  if (window.CheckoutWebComponents) {\n    return window.CheckoutWebComponents(options);\n  }\n\n  const script = createScript(CDN_URL);\n\n  const CheckoutWebComponents = await waitForScriptLoad(script);\n\n  return CheckoutWebComponents(options);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}