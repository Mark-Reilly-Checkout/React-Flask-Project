type Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
/**
 * Enumeration of the possible environments.
 * @enum {string}
 */
declare enum Environment {
    Production = "production",
    Sandbox = "sandbox"
}
/**
 * Union type representing the environment values as strings.
 */
type EnvironmentUnion = `${Environment}`;
/**
 * Translation keys for various messages used in the application.
 * @interface {Object} Translations
 */
type Translations = {
    /**
     * The call to action message to capture the customer's full name.
     */
    'bancontact.holder_name': string;
    /**
     * The label for the card option.
     */
    card: string;
    /**
     * Label for cardholder name input.
     */
    'card.card_holder_name': string;
    /**
     * Label for the card number input.
     */
    'card.card_number': string;
    /**
     * Error message displayed when the card number is incomplete.
     */
    'card.card_number.invalid': string;
    /**
     * Error message displayed when the card number comes from an unsupported card scheme.
     */
    'card.card_number.not_supported': string;
    /**
     * Label for card expiry date input.
     */
    'card.expiry_date': string;
    /**
     * Error message displayed when the card expiry date is invalid.
     */
    'card.expiry_date.invalid': string;
    /**
     * Message describing the format for card expiry month input.
     */
    'card.expiry_date.placeholder.month': string;
    /**
     * Message describing the format for card expiry year input.
     */
    'card.expiry_date.placeholder.year': string;
    /**
     * Label for preferred scheme selection.
     */
    'card.preferred_scheme.cta': string;
    /**
     * Message prompting the customer to select their preferred scheme.
     */
    'card.preferred_scheme.description': string;
    /**
     * Label for card security code (CVV) input.
     */
    'card.security_code': string;
    /**
     * Error message displayed when the security code (CVV) is incomplete.
     */
    'card.security_code.invalid': string;
    /**
     * Message describing the format for card security code input.
     */
    'card.security_code.placeholder': string;
    /**
     * Validation message displayed when the customer provides an invalid email.
     */
    'form.email.invalid': string;
    /**
     * Placeholder message displayed in the empty email input field.
     */
    'form.email.placeholder': string;
    /**
     * Placeholder message displayed in the empty full name input field.
     */
    'form.full_name.placeholder': string;
    /**
     * Validation message displayed when the customer inputs a value shorter than the required length.
     */
    'form.greater_than': string;
    /**
     * Validation message displayed when the customer inputs a value longer than the required length.
     */
    'form.less_than': string;
    /**
     * Validation message displayed when the customer leaves a required field blank.
     */
    'form.required': string;
    /**
     * Label for bank selection.
     */
    'ideal.bank': string;
    /**
     * Label for full name input.
     */
    'multibanco.holder_name': string;
    /**
     * Label for email input.
     */
    'p24.holder_email': string;
    /**
     * Label for full name input.
     */
    'p24.holder_name': string;
    /**
     * The call to action displayed on the pay button.
     */
    'pay_button.pay': string;
    /**
     * The payment method-specific call to action displayed on the pay button.
     */
    'pay_button.pay_with': string;
    /**
     * Message displayed when the payment is completed.
     */
    'pay_button.payment_complete': string;
    /**
     * Error message displayed if the payment attempt fails.
     */
    'pay_button.payment_failed': string;
    /**
     * Message displayed while the payment is processing.
     */
    'pay_button.payment_processing': string;
    /**
     * Message displayed when the customer is about to be redirected to complete their payment.
     */
    'pay_button.redirect_cta': string;
    /**
     * Error message displayed when the customer has provided invalid payment details.
     */
    'payment.declined.invalid_customer_data': string;
    /**
     * Error message displayed when the PaymentSession data provided is invalid for the chosen payment method â€“ this exists to cover edge-cases and should not occur.
     */
    'payment.declined.invalid_payment_session_data': string;
    /**
     * Error message displayed when the merchant is misconfigured for the chosen payment method.
     */
    'payment.declined.merchant_misconfiguration': string;
    /**
     * Error message displayed when the customer does not hold sufficient funds to complete the transaction with their chosen payment method.
     */
    'payment.declined.not_enough_funds': string;
    /**
     * Fallback message displayed when the chosen payment method declines the transaction.
     */
    'payment.declined.try_again': string;
};
/**
 * Type representing custom translations for different locales.
 * @interface CustomTranslations
 * @property {Partial<Translations>} [locale] - Custom translations for a specific locale (examples `en` or `en-GB`).
 */
type CustomTranslations = {
    /**
     * Custom translations for a specific locale (examples `en` or `en-GB`).
     */
    [locale: string]: Partial<Translations>;
};
/**
 * Enumeration of the supported component names.
 * @enum {string}
 */
declare enum ComponentName {
    Applepay = "applepay",
    Bancontact = "bancontact",
    Card = "card",
    Eps = "eps",
    Giropay = "giropay",
    Googlepay = "googlepay",
    Ideal = "ideal",
    Knet = "knet",
    Multibanco = "multibanco",
    P24 = "p24",
    Paypal = "paypal",
    Sofort = "sofort",
    Flow = "flow"
}
/**
 * Union type representing the component name values as strings.
 */
type ComponentNameUnion = `${ComponentName}`;
/**
 * Interface representing a component in the checkout flow.
 * @interface Component
 */
interface Component {
    /** The type of the component. */
    type: ComponentNameUnion;
    /**
     * Submits a Component, if you require your own pay button.
     * Not available for digital wallets, including Apple Pay and Google Pay.
     *
     * @return {Component} The Component instance.
     */
    submit(): void;
    /**
     * Checks if the Component has captured all details from the
     * customer and can be submitted.
     *
     * @return {boolean} Validity of the Component for submission.
     */
    isValid(): boolean;
    /**
     * Checks if the Component can be rendered.
     * Call this before mounting the Component.
     *
     * @return {Promise<boolean>}
     */
    isAvailable(): Promise<boolean>;
    /**
     * Mounts a Component to a page.
     * You can provide either:
     * - an Element Selector
     *   (https://developer.mozilla.org/en-US/docs/Web/API/Element)
     * - a DOM Element Object
     *   (https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors)
     *
     * @param {string} element - the Element Selector or DOM Element object to mount to
     * @return {Component}
     */
    mount(element: string | Element): Component;
    /**
     * Unmounts a Component from the page.
     * This stops the component rendering, and removes all life-cycles
     * from the browser.
     *
     * @return {Component}
     */
    unmount(): Component;
    /** The display name of the component. */
    name: string;
}
/**
 * Enumeration of possible reasons for payment decline.
 * @enum {string}
 */
declare enum PaymentDeclineReason {
    NotEnoughFunds = "not_enough_funds",
    InvalidPaymentSessionData = "invalid_payment_session_data",
    InvalidCustomerData = "invalid_customer_data",
    MerchantMisconfiguration = "merchant_misconfiguration",
    TryAgain = "try_again"
}
/**
 * Response type for a successful payment session.
 * @interface PayPaymentSessionSuccessfulResponse
 */
type PayPaymentSessionSuccessfulResponse = {
    /**
     * The ID of the payment session.
     */
    id: string;
    /**
     * The status of the payment session, always 'Approved'.
     */
    status: 'Approved';
    /**
     * The component type associated with the payment session.
     */
    type: ComponentNameUnion;
};
/**
 * Enumeration of possible types of checkout errors.
 * @enum {string}
 */
declare enum CheckoutErrorType {
    Integration = "Integration",
    Request = "Request",
    PaymentMethod = "PaymentMethod",
    Submit = "Submit"
}
/**
 * Enumeration of error codes for payment method errors.
 * @enum {string}
 */
declare enum CheckoutPaymentMethodErrorCode {
    PaymentMethodAttemptFailed = "payment_method_attempt_failed"
}
/**
 * Enumeration of error codes for integration errors.
 * @enum {string}
 */
declare enum CheckoutIntegrationErrorCode {
    BrowserEnvironmentRequired = "browser_environment_required",
    CallbackResultInvalid = "callback_result_invalid",
    ComponentAlreadyMounted = "component_already_mounted",
    ComponentIsAvailableNotChecked = "component_is_available_not_checked",
    ComponentNotSupported = "component_not_supported",
    ElementNotFound = "element_not_found",
    PaymentSessionInvalid = "payment_session_invalid"
}
/**
 * Enumeration of error codes for request errors.
 * @enum {string}
 */
declare enum CheckoutRequestErrorCode {
    PaymentRequestDeclined = "payment_request_declined",
    PaymentRequestFailed = "payment_request_failed"
}
/**
 * Enumeration of error codes for submit errors.
 * @enum {string}
 */
declare enum CheckoutSubmitErrorCode {
    ComponentInvalid = "component_invalid"
}
/**
 * Base type for checkout errors.
 * @interface CheckoutErrorBase
 */
type CheckoutErrorBase = {
    /**
     * The name of the error.
     */
    name: 'CheckoutError';
    /**
     * The error message. This is a human readable error message and can change, thus avoid relying on it.
     */
    message: string;
};
/**
 * Type for integration errors.
 * @interface CheckoutIntegrationError
 */
type CheckoutIntegrationError = Prettify<CheckoutErrorBase & {
    /**
     * The type of the error.
     */
    type: `${CheckoutErrorType.Integration}`;
    /**
     * The specific integration error code.
     */
    code: CheckoutIntegrationErrorCode;
    /**
     * Additional details about the error.
     */
    details: {
        /**
         * The unique identifier of the browser session that created the Component.
         */
        browserSessionId: string;
        /**
         * The Element selector or DOM object that caused the mounting error.
         *
         * This property is only returned for errors with an `element_not_found` error code.
         */
        element?: string | Element;
        /**
         * The unique identifier of the provided payment session response.
         */
        paymentSessionId?: string;
        /**
         * The name of the payment method used for the payment.
         */
        type?: ComponentNameUnion;
    };
}>;
/**
 * Type for request errors.
 * @interface CheckoutRequestError
 */
type CheckoutRequestError = Prettify<CheckoutErrorBase & {
    /**
     * The type of the error.
     */
    type: `${CheckoutErrorType.Request}`;
    /**
     * The specific request error code.
     */
    code: CheckoutRequestErrorCode | CheckoutPaymentMethodErrorCode;
    /**
     * Additional details about the error.
     */
    details: {
        /**
         * The unique identifier of the browser session that created the Component.
         */
        browserSessionId: string;
        /**
         * The payment ID.
         */
        paymentId?: string;
        /**
         * The unique identifier of the provided payment session response.
         */
        paymentSessionId: string;
        /**
         * Additional error codes returned from the network request.
         */
        requestErrorCodes?: (PaymentDeclineReason | string)[];
        /**
         * The unique identifier for the network request.
         */
        requestId?: string;
        /**
         * The [HTTP response status code](https://www.checkout.com/docs/developer-resources/codes/api-response-codes#HTTP_status_codes) for the network request.
         */
        status?: number;
        /**
         * The name of the payment method used for the payment.
         */
        type?: ComponentNameUnion;
    };
}>;
/**
 * Type for payment method errors.
 * @interface CheckoutPaymentMethodError
 */
type CheckoutPaymentMethodError = Prettify<CheckoutErrorBase & {
    /**
     * The type of the error.
     */
    type: `${CheckoutErrorType.PaymentMethod}`;
    /**
     * The specific payment method error code.
     */
    code: CheckoutPaymentMethodErrorCode;
    /**
     * Additional details about the error.
     */
    details: {
        /**
         * The unique identifier of the browser session that created the Component.
         */
        browserSessionId: string;
        /**
         * The unique identifier of the provided payment session response.
         */
        paymentSessionId: string;
        /**
         * The name of the payment method used for the payment.
         */
        type: ComponentNameUnion;
    };
}>;
/**
 * Type for submit errors.
 * @interface CheckoutSubmitError
 */
type CheckoutSubmitError = Prettify<CheckoutErrorBase & {
    /**
     * The type of the error.
     */
    type: `${CheckoutErrorType.Submit}`;
    /**
     * The specific payment method error code.
     */
    code: CheckoutSubmitErrorCode | CheckoutPaymentMethodErrorCode;
    /**
     * The specific submit error code.
     */
    details: {
        /**
         * The unique identifier of the browser session that created the Component.
         */
        browserSessionId: string;
        /**
         * The unique identifier of the provided payment session response.
         */
        paymentSessionId: string;
        /**
         * The name of the payment method used for the payment.
         */
        type: ComponentNameUnion;
    };
}>;
/**
 * Union type representing any checkout error.
 * @typedef {CheckoutIntegrationError | CheckoutRequestError | CheckoutPaymentMethodError | CheckoutSubmitError} CheckoutError
 */
type CheckoutError = CheckoutIntegrationError | CheckoutRequestError | CheckoutPaymentMethodError | CheckoutSubmitError;
type HandleClickResult = {
    continue: boolean;
};
/**
 * Type representing supported dimensions which can be a string or number.
 */
type SupportedDimensions = string | number;
/**
 * Interface representing font properties.
 * @interface Font
 */
interface Font {
    /** The font family name. */
    fontFamily: string;
    /** The font size. */
    fontSize: SupportedDimensions;
    /** The line height. */
    lineHeight: SupportedDimensions;
    /** The font weight. */
    fontWeight: number;
    /** The letter spacing. */
    letterSpacing: SupportedDimensions;
}
/**
 * Type representing color tokens.
 * @interface ColorTokens
 */
type ColorTokens = {
    /** Primary color. */
    colorPrimary: string;
    /** Secondary color. */
    colorSecondary: string;
    /** Disabled state color. */
    colorDisabled: string;
    /** Error state color. */
    colorError: string;
    /** Inverse color. */
    colorInverse: string;
    /** Action color. */
    colorAction: string;
    /** Success state color. */
    colorSuccess: string;
    /** Background color. */
    colorBackground: string;
    /** Form background color. */
    colorFormBackground: string;
    /** Border color. */
    colorBorder: string;
    /** Form border color. */
    colorFormBorder: string;
    /** Outline color. */
    colorOutline: string;
};
/**
 * Type representing border radius which is a tuple of supported dimensions.
 */
type BorderRadius = [SupportedDimensions, SupportedDimensions];
/**
 * Enumeration of font names.
 * @enum {string}
 */
declare enum FontName {
    Subheading = "subheading",
    Footnote = "footnote",
    Button = "button",
    Input = "input",
    Label = "label"
}
/**
 * Type representing design tokens.
 * @interface DesignTokens
 */
type DesignTokens = Prettify<{
    /**
     * Subheading font properties.
     */
    subheading: Partial<Font>;
    /**
     * Footnote font properties.
     */
    footnote: Partial<Font>;
    /**
     * Button font properties.
     */
    button: Partial<Font>;
    /**
     * Input font properties.
     */
    input: Partial<Font>;
    /**
     * Label font properties.
     */
    label: Partial<Font>;
    /**
     * Border radius properties.
     */
    borderRadius: BorderRadius;
    /**
     * Border width.
     */
    borderWidth: string;
    /**
     * Focus outline width.
     */
    focusOutlineWidth: string;
} & ColorTokens>;
/**
 * Type representing partial design tokens.
 */
type PartialDesignTokens = Partial<DesignTokens>;
type SharedComponentOptions = {
    /**
     * Fired when a Component is initialized and ready
     * for the customer to interact.
     *
     * Component is the instance that fired the event.
     */
    onReady?: (component: Component) => void;
    /**
     * Fired when a Component changes after a
     * customer interaction.
     *
     * Component is the instance that fired the event.
     */
    onChange?: (component: Component) => void;
    /**
     * Fired when a Component changes after a
     * customer interaction.
     *
     * Component is the instance that fired the event.
     */
    onSubmit?: (component: Component) => void;
    /**
     * Fired when the payment has been completed synchronously.
     * This event will not be fired if the payment requires
     * asynchronous action. For example, 3DS authentication.
     *
     * Component is the instance that fired the event.
     *
     * PaymentResponse contains information on the successful payment:
     *   - {string} id - a unique identifier for the payment
     *   - {string} status - the payment status â€“ will always be 'Approved'
     *   - {string} type - the name of the payment method that was used for the payment
     */
    onPaymentCompleted?: (component: Component, payment: PayPaymentSessionSuccessfulResponse) => void;
    /**
     * Fired when an error occurs.
     *
     * Component is the instance that fired the event.
     *
     * See the CheckoutError reference for more information.
     */
    onError?: (component: Component, error: CheckoutError) => void;
};
/**
 * Options for configuring a payment component.
 * @interface ComponentOptions
 */
type ComponentOptions = Prettify<SharedComponentOptions & {
    /**
     * Flag to show or hide the pay button.
     */
    showPayButton?: boolean;
}>;
/**
 * Options for configuring the card component.
 * @interface CardComponentOptions
 */
type CardComponentOptions = Prettify<ComponentOptions & {
    /**
     * Object that can be used to provide data for fields.
     */
    data?: {
        /**
         * provide the card holder name.
         */
        cardholderName?: string;
    };
    /**
     * The display state for the card holder name. If `top` or `bottom` the field is required, `hidden` will remove the field.
     */
    displayCardholderName?: 'top' | 'bottom' | 'hidden';
}>;
/**
 * Options for configuring a wallet payment component.
 * @interface WalletComponentOptions
 */
type WalletComponentOptions = Prettify<SharedComponentOptions & {
    /**
     * Triggered when a wallet payment button is clicked.
     * For example, Apple Pay, Google Pay, or PayPal.
     *
     * You can use this to perform checks before
     * beginning the payment process.
     *
     * Component is the instance that triggered the callback.
     */
    handleClick?: (component: Component) => Promise<HandleClickResult> | HandleClickResult;
}>;
/**
 * Options for configuring a flow payment component.
 * @interface FlowComponentOptions
 */
type FlowComponentOptions = Prettify<ComponentOptions & WalletComponentOptions>;
/**
 * Options for configuring any type of payment component.
 * @interface AllComponentOptions
 */
type AllComponentOptions = Prettify<ComponentOptions & WalletComponentOptions>;
/**
 * Response type for a payment session.
 * @interface PaymentSessionResponse
 */
type PaymentSessionResponse = Record<string, unknown>;
/**
 * Options map for different component names.
 * @interface OptionsMap
 */
type ComponentOptionsByComponentName = {
    /**
     * Options for ApplePay.
     */
    applepay: WalletComponentOptions;
    /**
     * Options for Bancontact.
     */
    bancontact: ComponentOptions;
    /**
     * Options for Bancontact.
     */
    card: CardComponentOptions;
    /**
     * Options for EPS.
     */
    eps: ComponentOptions;
    /**
     * Options for Giropay.
     */
    giropay: ComponentOptions;
    /**
     * Options for GooglePay.
     */
    googlepay: WalletComponentOptions;
    /**
     * Options for iDEAL.
     */
    ideal: ComponentOptions;
    /**
     * Options for KNET.
     */
    knet: ComponentOptions;
    /**
     * Options for Multibanco.
     */
    multibanco: ComponentOptions;
    /**
     * Options for Przelewy24.
     */
    p24: ComponentOptions;
    /**
     * Options for PayPal.
     */
    paypal: WalletComponentOptions;
    /**
     * Options for Sofort.
     */
    sofort: WalletComponentOptions;
    /**
     * Options for Flow.
     */
    flow: FlowComponentOptions;
};
/**
 * Configuration options for the checkout components.
 * @interface Options
 */
type Options = Prettify<{
    /**
     * The public API key.
     */
    publicKey: string;
    /**
     * The public API key.
     */
    paymentSession: PaymentSessionResponse;
    /**
     * The payment session response.
     */
    locale?: string;
    /**
     * The locale to be used.
     */
    environment?: EnvironmentUnion;
    /**
     * The public API key.
     */
    appearance?: PartialDesignTokens;
    /**
     * The custom translations.
     */
    translations?: CustomTranslations;
    /**
     * The component-specific options.
     */
    componentOptions?: ComponentOptionsByComponentName;
} & AllComponentOptions>;
/**
 * Interface for creating checkout web components.
 * @interface CheckoutWebComponents
 */
interface CheckoutWebComponents {
    /**
     * Creates a new component.
     * @param {ComponentNameUnion} name - The name of the component.
     * @param {ComponentOptions[T]} [options] - The options for the component.
     * @returns {Component} The created component.
     */
    create<T extends ComponentNameUnion>(
    /**
     * The name of the component.
     */
    name: T, 
    /**
     * The options for the component.
     */
    options?: ComponentOptionsByComponentName[T]): Component;
}
/**
 * Interface for initializing CheckoutWebComponents.
 * @interface WindowCheckoutWebComponents
 */
interface WindowCheckoutWebComponents {
    /**
     * Initializes the CheckoutWebComponents.
     * @param {Options} [options] - The options for the components.
     * @returns {CheckoutWebComponents} The initialized CheckoutWebComponents.
     */
    (options?: Options): CheckoutWebComponents;
}
/**
 * Loads the checkout web components.
 * @param {Options} options - The options for loading the components.
 * @returns {Promise<CheckoutWebComponents>} A promise that resolves to the loaded checkout web components.
 */
type LoadCheckoutWebComponents = (options: Options) => Promise<CheckoutWebComponents>;

declare const CDN_URL = "https://checkout-web-components.checkout.com/index.js";
declare enum CheckoutLoaderErrorType {
    Integration = "Integration"
}
declare enum CheckoutLoaderIntegrationErrorCode {
    BrowserEnvironmentRequired = "browser_environment_required",
    CheckoutWebComponentInstanceNotOnWindow = "checkout_web_component_instance_not_on_window",
    ScriptFailed = "script_failed",
    ScriptTimedOut = "script_timed_out"
}
type CheckoutLoaderErrorOptions = {
    type: CheckoutLoaderErrorType;
    code: CheckoutLoaderIntegrationErrorCode;
    message: string;
};
declare class CheckoutLoaderError extends Error {
    type: CheckoutLoaderErrorType;
    code: CheckoutLoaderIntegrationErrorCode;
    constructor({ type, message, code }: CheckoutLoaderErrorOptions);
}
/**
 * Loads the checkout web components.
 * @throws {CheckoutLoaderError}
 */
declare const loadCheckoutWebComponents: LoadCheckoutWebComponents;

export { type AllComponentOptions, type BorderRadius, CDN_URL, type CardComponentOptions, type CheckoutError, CheckoutErrorType, type CheckoutIntegrationError, CheckoutIntegrationErrorCode, CheckoutLoaderError, CheckoutLoaderErrorType, CheckoutLoaderIntegrationErrorCode, type CheckoutPaymentMethodError, CheckoutPaymentMethodErrorCode, type CheckoutRequestError, CheckoutRequestErrorCode, type CheckoutSubmitError, CheckoutSubmitErrorCode, type CheckoutWebComponents, type ColorTokens, type Component, ComponentName, type ComponentNameUnion, type ComponentOptions, type CustomTranslations, type DesignTokens, Environment, type EnvironmentUnion, type FlowComponentOptions, type Font, FontName, type HandleClickResult, type LoadCheckoutWebComponents, type Options, type PartialDesignTokens, type PayPaymentSessionSuccessfulResponse, PaymentDeclineReason, type PaymentSessionResponse, type SupportedDimensions, type Translations, type WalletComponentOptions, type WindowCheckoutWebComponents, loadCheckoutWebComponents };
